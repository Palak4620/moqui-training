<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

<!-- Create an Entity-Auto Service-->
    <service verb="create" noun="MoquiTraining" type="entity-auto">
        <in-parameters><auto-parameters entity-name="MoquiTraining" include="nonpk"/>
            <parameter name="trainingName" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="trainingId"/></out-parameters>
    </service>

    <service verb="create" noun="MoquiTrainingInline">
        <in-parameters>
            <parameter name="trainingName" required="true"/>
            <parameter name="trainingDate" />
            <parameter name="trainingPrice"/>
            <parameter name="trainingDuration"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trainingId"/>
        </out-parameters>
        <actions>
            <service-call name="create#MoquiTraining" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="MoquiTrainingGroovy" type="script"
             location="component://moqui-training/service/TrainingService.groovy">
        <in-parameters>
            <parameter name="trainingName" required="true"/>
            <parameter name="trainingDate" />
            <parameter name="trainingPrice"/>
            <parameter name="trainingDuration"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trainingId"/>
        </out-parameters>
    </service>

<!--    assignment-4-->
<!--    Fetch MoquiTraining Records:-->
    <service verb="get" noun="TrainingByIdName">
        <description>
            to find records based on the training name or training id.
        </description>
        <in-parameters>
            <parameter name="trainingId"/>
            <parameter name="trainingName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trainingDetail"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="MoquiTraining" list="trainingDetail">
                <econdition field-name="trainingId" value="${trainingId}" ignore-if-empty="true"/>
                <econdition field-name="trainingName" value="${trainingName}" ignore-if-empty="true"/>
                <select-field field-name="trainingId"/>
                <select-field field-name="trainingName"/>
                <select-field field-name="trainingDate"/>
            </entity-find>
        </actions>
    </service>

<!--    Create/Update MoquiTraining Records:-->
    <service verb="create" noun="CreateUpdate">
        <in-parameters>
            <parameter name="trainingId"/>
            <parameter name="trainingName" required="true" />
            <parameter name="trainingDate" format="${yyyy-mm-dd}"/>
            <parameter name="trainingPrice" type="Integer"/>
            <parameter name="trainingDuration" type="Integer"/>
        </in-parameters>
        <out-parameters>
            <parameter name="trainingID"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="MoquiTraining" value-field="moquiTraining">
                <field-map field-name="trainingId"/>
            </entity-find-one>
            <if condition="moquiTraining != null" >
                <then>
                    <service-call name="update#MoquiTraining" in-map="context" out-map="context"/>
                </then>
                <else>
                    <service-call name="create#MoquiTraining" in-map="context" out-map="context"/>
                </else>
            </if>
        </actions>
    </service>
</services>

